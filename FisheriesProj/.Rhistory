alpha = "prob_diff0"
)) +
geom_point(size = 3, position = position_dodge(0.3)) +
geom_errorbar(aes_string(ymin = "lower", ymax = "upper"),
position = position_dodge(0.3), width = 0
) +
geom_hline(yintercept = 0, lty = 2) +
coord_flip() +
xlab("Time Series") +
ylab("Loading")+
scale_x_discrete(labels = function(x) str_wrap(x, width = wid))+
theme(legend.position="none")+
theme_bw()
plot_loadings2 <- function(rotated_modelfit,
names = NULL,
facet = TRUE,
violin = TRUE,
conf_level = 0.95,
threshold = NULL) {
v <- dfa_loadings(rotated_modelfit,
summary = FALSE,
names = names,
conf_level = conf_level
)
df <- dfa_loadings(rotated_modelfit,
summary = TRUE,
names = names,
conf_level = conf_level
)
# filter values below threshold
if (!is.null(threshold)) {
df <- df[df$prob_diff0 >= threshold, ]
v <- v[v$prob_diff0 >= threshold, ]
}
if (!violin) {
p1 <- ggplot(df, aes_string(
x = "name", y = "median",
alpha = "prob_diff0"
)) +
geom_point(size = 3, position = position_dodge(0.3)) +
geom_errorbar(aes_string(ymin = "lower", ymax = "upper"),
position = position_dodge(0.3), width = 0
) +
geom_hline(yintercept = 0, lty = 2) +
coord_flip() +
xlab("Time Series") +
ylab("Loading")+
scale_x_discrete(labels = function(x) str_wrap(x, width = wid))+
theme(legend.position="none")+
theme_bw()
}
if (violin) {
p1 <- ggplot(v, aes_string(
x = "name", y = "loading", fill = "trend",
alpha = "prob_diff0"
)) +
geom_violin(color = NA) +
geom_hline(yintercept = 0, lty = 2) +
coord_flip() +
xlab("Time Series") +
ylab("Loading")+
theme(axis.text=element_text(size=ax),
axis.title=element_text(size=ti,face="bold"))+
scale_x_discrete(labels = function(x) str_wrap(x, width = wid))+
theme_bw()
}
if (facet) {
p1 <- p1 + facet_wrap(~trend, scales = "free_x")
}
p1
}
l.calcofi <- plot_loadings2(r.calcofi,names=namescalcofi$namesshort)
l.calcofi
plot_loadings2 <- function(rotated_modelfit,
names = NULL,
facet = TRUE,
violin = TRUE,
conf_level = 0.95,
threshold = NULL) {
v <- dfa_loadings(rotated_modelfit,
summary = FALSE,
names = names,
conf_level = conf_level
)
df <- dfa_loadings(rotated_modelfit,
summary = TRUE,
names = names,
conf_level = conf_level
)
# filter values below threshold
if (!is.null(threshold)) {
df <- df[df$prob_diff0 >= threshold, ]
v <- v[v$prob_diff0 >= threshold, ]
}
if (!violin) {
p1 <- ggplot(df, aes_string(
x = "name", y = "median", col = "trend",
alpha = "prob_diff0"
)) +
geom_point(size = 3, position = position_dodge(0.3)) +
geom_errorbar(aes_string(ymin = "lower", ymax = "upper"),
position = position_dodge(0.3), width = 0
) +
geom_hline(yintercept = 0, lty = 2) +
coord_flip() +
xlab("Time Series") +
ylab("Loading")+
scale_x_discrete(labels = function(x) str_wrap(x, width = wid))+
theme(legend.position="none")+
theme_bw()
}
if (violin) {
p1 <- ggplot(v, aes_string(
x = "name", y = "loading", fill = "trend",
alpha = "prob_diff0"
)) +
geom_violin(color = NA) +
geom_hline(yintercept = 0, lty = 2) +
coord_flip() +
xlab("Time Series") +
ylab("Loading")+
theme(axis.text=element_text(size=ax),
axis.title=element_text(size=ti,face="bold"))+
scale_x_discrete(labels = function(x) str_wrap(x, width = wid))+
theme(legend.position="none")+
theme_bw()
}
if (facet) {
p1 <- p1 + facet_wrap(~trend, scales = "free_x")
}
p1
}
l.calcofi <- plot_loadings2(r.calcofi,names=namescalcofi$namesshort)
l.calcofi
plot_trends2 <- function(rotated_modelfit,
years = NULL,
highlight_outliers = FALSE,
threshold = 0.01) {
rotated <- rotated_modelfit
df <- dfa_trends(rotated, years = years)
# make faceted ribbon plot of trends
p1 <- ggplot(df, aes_string(x = "time", y = "estimate")) +
geom_ribbon(aes_string(ymin = "lower", ymax = "upper"), alpha = 0.4) +
geom_line() +
facet_wrap("trend_number") +
xlab("Time") +
ylab("")+
theme(axis.text=element_text(size=ax),
axis.title=element_text(size=ti,face="bold"))+
theme_bw()
if (highlight_outliers) {
swans <- find_swans(rotated, threshold = threshold)
df$outliers <- swans$below_threshold
p1 <- p1 + geom_point(data = df[which(df$outliers), ], color = "red")
}
p1
}
plot_loadings2 <- function(rotated_modelfit,
names = NULL,
facet = TRUE,
violin = TRUE,
conf_level = 0.95,
threshold = NULL) {
v <- dfa_loadings(rotated_modelfit,
summary = FALSE,
names = names,
conf_level = conf_level
)
df <- dfa_loadings(rotated_modelfit,
summary = TRUE,
names = names,
conf_level = conf_level
)
# filter values below threshold
if (!is.null(threshold)) {
df <- df[df$prob_diff0 >= threshold, ]
v <- v[v$prob_diff0 >= threshold, ]
}
if (!violin) {
p1 <- ggplot(df, aes_string(
x = "name", y = "median", col = "trend",
alpha = "prob_diff0"
)) +
geom_point(size = 3, position = position_dodge(0.3)) +
geom_errorbar(aes_string(ymin = "lower", ymax = "upper"),
position = position_dodge(0.3), width = 0
) +
geom_hline(yintercept = 0, lty = 2) +
coord_flip() +
xlab("Time Series") +
ylab("Loading")+
scale_x_discrete(labels = function(x) str_wrap(x, width = wid))+
theme(legend.position="none")+
theme_bw()
}
if (violin) {
p1 <- ggplot(v, aes_string(
x = "name", y = "loading", fill = "trend",
alpha = "prob_diff0"
)) +
geom_violin(color = NA) +
geom_hline(yintercept = 0, lty = 2) +
coord_flip() +
xlab("Time Series") +
ylab("Loading")+
theme(axis.text=element_text(size=ax),
axis.title=element_text(size=ti,face="bold"))+
scale_x_discrete(labels = function(x) str_wrap(x, width = wid))+
theme(legend.position="none")+
theme_bw()
}
if (facet) {
p1 <- p1 + facet_wrap(~trend, scales = "free_x")
}
p1
}
l.calcofi <- plot_loadings2(r.calcofi,names=namescalcofi$namesshort)
l.calcofi
plot_loadings2 <- function(rotated_modelfit,
names = NULL,
facet = TRUE,
violin = TRUE,
conf_level = 0.95,
threshold = NULL) {
v <- dfa_loadings(rotated_modelfit,
summary = FALSE,
names = names,
conf_level = conf_level
)
df <- dfa_loadings(rotated_modelfit,
summary = TRUE,
names = names,
conf_level = conf_level
)
# filter values below threshold
if (!is.null(threshold)) {
df <- df[df$prob_diff0 >= threshold, ]
v <- v[v$prob_diff0 >= threshold, ]
}
if (!violin) {
p1 <- ggplot(df, aes_string(
x = "name", y = "median"
)) +
geom_point(size = 3, position = position_dodge(0.3)) +
geom_errorbar(aes_string(ymin = "lower", ymax = "upper"),
position = position_dodge(0.3), width = 0
) +
geom_hline(yintercept = 0, lty = 2) +
coord_flip() +
xlab("Time Series") +
ylab("Loading")+
scale_x_discrete(labels = function(x) str_wrap(x, width = wid))+
theme(legend.position="none")+
theme_bw()
}
if (violin) {
p1 <- ggplot(v, aes_string(
x = "name", y = "loading"
)) +
geom_violin(color = NA) +
geom_hline(yintercept = 0, lty = 2) +
coord_flip() +
xlab("Time Series") +
ylab("Loading")+
theme(axis.text=element_text(size=ax),
axis.title=element_text(size=ti,face="bold"))+
scale_x_discrete(labels = function(x) str_wrap(x, width = wid))+
theme(legend.position="none")+
theme_bw()
}
if (facet) {
p1 <- p1 + facet_wrap(~trend, scales = "free_x")
}
p1
}
l.calcofi <- plot_loadings2(r.calcofi,names=namescalcofi$namesshort)
l.calcofi
#### RREAS ####
y1rreas <- 1983
y2rreas<- 2022
dat.RREAS<-dat%>%select(c(year,n2))%>%
filter(year>=y1rreas&year<=y2rreas)#just setting an order so we know how to set the variance index for each survey
remelt = melt(dat.RREAS,id.vars = "year")
names(remelt)<-c("year","code","value")
Y <- dcast(remelt, code ~ year)
names = Y$code
Y = as.matrix(Y[,-which(names(Y) == "code")])
n_chains = 3
n_iter = 8000
options(mc.cores = parallel::detectCores())
# load environmental covariate data, and average over spring months to have one value per covar per year
nspp=dim(Y)[1]
nyear=dim(Y)[2]
ntrend=1
n_row=nspp*nyear
n_row_pro=ntrend*nyear
varIndx = c(rep(1,length(n2)))
fit.mod.RREAS = fit_dfa(y = Y,
num_trends = 1,
iter=n_iter,
varIndx = varIndx,
chains=n_chains, estimate_nu=model_df$est_nu[1],
estimate_trend_ma = model_df$estimate_trend_ma[1],
estimate_trend_ar = model_df$estimate_trend_ar[1],
estimate_process_sigma = model_df$estimate_process_sigma[1],
seed=123)
plot_loadings2 <- function(rotated_modelfit,
names = NULL,
facet = TRUE,
violin = TRUE,
conf_level = 0.95,
threshold = NULL) {
v <- dfa_loadings(rotated_modelfit,
summary = FALSE,
names = names,
conf_level = conf_level
)
df <- dfa_loadings(rotated_modelfit,
summary = TRUE,
names = names,
conf_level = conf_level
)
# filter values below threshold
if (!is.null(threshold)) {
df <- df[df$prob_diff0 >= threshold, ]
v <- v[v$prob_diff0 >= threshold, ]
}
if (!violin) {
p1 <- ggplot(df, aes_string(
x = "name", y = "median", col = "trend",
alpha = "prob_diff0"
)) +
geom_point(size = 3, position = position_dodge(0.3)) +
geom_errorbar(aes_string(ymin = "lower", ymax = "upper"),
position = position_dodge(0.3), width = 0
) +
geom_hline(yintercept = 0, lty = 2) +
coord_flip() +
xlab("Time Series") +
ylab("Loading")+
scale_x_discrete(labels = function(x) str_wrap(x, width = wid),guide="none")+
theme(legend.position="none")+
theme_bw()
}
if (violin) {
p1 <- ggplot(v, aes_string(
x = "name", y = "loading", fill = "trend",
alpha = "prob_diff0"
)) +
geom_violin(color = NA) +
geom_hline(yintercept = 0, lty = 2) +
coord_flip() +
xlab("Time Series") +
ylab("Loading")+
theme(axis.text=element_text(size=ax),
axis.title=element_text(size=ti,face="bold"))+
scale_x_discrete(labels = function(x) str_wrap(x, width = wid), guide="none")+
theme_bw()
}
if (facet) {
p1 <- p1 + facet_wrap(~trend, scales = "free_x")
}
p1
}
l.calcofi <- plot_loadings2(r.calcofi,names=namescalcofi$namesshort)
l.calcofi
plot_loadings2 <- function(rotated_modelfit,
names = NULL,
facet = TRUE,
violin = TRUE,
conf_level = 0.95,
threshold = NULL) {
v <- dfa_loadings(rotated_modelfit,
summary = FALSE,
names = names,
conf_level = conf_level
)
df <- dfa_loadings(rotated_modelfit,
summary = TRUE,
names = names,
conf_level = conf_level
)
# filter values below threshold
if (!is.null(threshold)) {
df <- df[df$prob_diff0 >= threshold, ]
v <- v[v$prob_diff0 >= threshold, ]
}
if (!violin) {
p1 <- ggplot(df, aes_string(
x = "name", y = "median", col = "trend",
alpha = "prob_diff0"
)) +
geom_point(size = 3, position = position_dodge(0.3)) +
geom_errorbar(aes_string(ymin = "lower", ymax = "upper"),
position = position_dodge(0.3), width = 0
) +
geom_hline(yintercept = 0, lty = 2) +
coord_flip() +
xlab("Time Series") +
ylab("Loading")+
guides(fill="none", alpha='none')+
scale_x_discrete(labels = function(x) str_wrap(x, width = wid))+
theme(legend.position="none")+
theme_bw()
}
if (violin) {
p1 <- ggplot(v, aes_string(
x = "name", y = "loading", fill = "trend",
alpha = "prob_diff0"
)) +
geom_violin(color = NA) +
geom_hline(yintercept = 0, lty = 2) +
coord_flip() +
xlab("Time Series") +
ylab("Loading")+
theme(axis.text=element_text(size=ax),
axis.title=element_text(size=ti,face="bold"))+
guides(fill="none", alpha='none')+
scale_x_discrete(labels = function(x) str_wrap(x, width = wid))+
theme_bw()
}
if (facet) {
p1 <- p1 + facet_wrap(~trend, scales = "free_x")
}
p1
}
l.calcofi <- plot_loadings2(r.calcofi,names=namescalcofi$namesshort)
l.calcofi
is_converged(fit.mod.calcofi)
summary(fit.mod.calcofi)
is_converged(fit.mod.calcofi)
namesRREAs<-data.frame(names)%>%
mutate(namesshort= c("Adult anchovy", "Adult sardine", "Krill", "Market squid",
"Myctophids", "Juv. anchovy", "Juv. boccacio rock.",
"Juv. chilipepper rock.", "Juv. Pacific hake",
"Juv. halfbanded rock.", "Juv Pacific sand.",
"Juv. shortbelly rock.","Juv. speckled sand.", "Juv. widow rock."))
pars = rstan::extract(fit.mod.RREAS$model)
r.RREAS <- rotate_trends(fit.mod.RREAS)
p.RREAS <- plot_trends2(r.RREAS,years =dat.RREAS$year)
p.RREAS
l.RREAS <- plot_loadings2(r.RREAS,names=namesRREAs$namesshort)
l.RREAS
is_converged(fit.mod.RREAS)
summary(fit.mod.RREAS)
trend.sea <-dfa_trends(r.SEA, years =dat.SEA$year)%>%
select(time, estimate, lower, upper)%>%
# rename(sea.estimate = estimate, sea.lower=lower,sea.upper=upper)%>%
mutate(trend = "SEA")%>%
mutate(era=ifelse(time<=1988, 1, ifelse(time>1988&time<=2012, 2,3)))
trend.rreas <-dfa_trends(r.RREAS, years =dat.RREAS$year)%>%
select(time, estimate, lower, upper)%>%
#  rename(rreas.estimate = estimate, rreas.lower=lower,rreas.upper=upper)%>%
mutate(trend = "RREAS")%>%
mutate(era=ifelse(time<=1988, 1, ifelse(time>1988&time<=2012, 2,3)))
trend.calcofi <-dfa_trends(r.calcofi, years =dat.calcofi$year)%>%
select(time, estimate, lower, upper)%>%
# rename(calcofi.estimate = estimate, calcofi.lower=lower,calcofi.upper=upper)%>%
mutate(trend = "CALCOFI")%>%
mutate(era=ifelse(time<=1988, 1, ifelse(time>1988&time<=2012, 2,3)))
dfa.trends <- trend.calcofi%>%
add_row(trend.rreas)
arranged <- ggarrange(p.calcofi, l.calcofi,p.RREAS,l.RREAS,ncol = 2, nrow = 2,
heights=c(1,1.25,1.5))
library(ggarrange)
library(ggpubr)
arranged <- ggarrange(p.calcofi, l.calcofi,p.RREAS,l.RREAS,ncol = 2, nrow = 2,
heights=c(1,1.25,1.5))
pdf(file = "DFAtrendsloadings.pdf",   # The directory you want to save the file in
width = 8, # The width of the plot in inches
height = 7)
arranged
dev.off()
arranged <- ggarrange(p.calcofi, l.calcofi,p.RREAS,l.RREAS,ncol = 2, nrow = 2,labels = c("A", "B", "C"),
heights=c(1,1.25,1.5))
arranged
arranged <- ggarrange(p.calcofi, l.calcofi,p.RREAS,l.RREAS,ncol = 2, nrow = 2,labels = c("A", "B", "C", "D"),
heights=c(1,1.25,1.5))
pdf(file = "DFAtrendsloadings.pdf",   # The directory you want to save the file in
width = 8, # The width of the plot in inches
height = 7)
arranged
dev.off()
plot.dat
library(strucchange)
library(ncdf4)
library(zoo)
library(maps)
library(mapdata)
library(chron)
library(fields)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(mgcv)
library(strucchange)
# reading in the data
schroeder.nph <-read.csv('data/physical/year_mon_area_max_x_y_new.csv')%>%
mutate(era= ifelse(Year<=1988,1, ifelse(Year>2012,3,2)))%>% #assigning eras
mutate(Year_win = if_else(Month == 11|Month ==12, Year+1, Year))%>% #creating a year offset fro winter
mutate(dec.yr =as.numeric(as.character(Year)) + (as.numeric(Month)-0.5)/12, #creating a decimal year
Area=Area/1000000)%>%  #converting area to smaller units
mutate(area.anom = Area-mean(Area)) #creating an area anomaly
# reading in the data
schroeder.nph <-read.csv('data/physical/year_mon_area_max_x_y_new.csv')%>%
mutate(era= ifelse(Year<=1988,1, ifelse(Year>2012,3,2)))%>% #assigning eras
mutate(Year_win = if_else(Month == 11|Month ==12, Year+1, Year))%>% #creating a year offset fro winter
mutate(dec.yr =as.numeric(as.character(Year)) + (as.numeric(Month)-0.5)/12, #creating a decimal year
Area=Area/1000000)%>%  #converting area to smaller units
mutate(area.anom = Area-mean(Area)) #creating an area anomaly
plot(schroeder.nph$dec.yr, schroeder.nph$Area, type="l") #check plot to visualize area through time
plot(schroeder.nph$dec.yr, schroeder.nph$Max, type="l") #check plot to visualize intensity through time
