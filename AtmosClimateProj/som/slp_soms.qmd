---
title: "SOM examples -- SLP"
format: html
editor: visual
execute: 
  echo: true
  warning: false
  message: false
---

### SOM Setup

```{r}
#| echo: false
#| warning: false
#| message: false
library(ncdf4)
library(chron)
library(RNetCDF)
library(tidyverse)
library(kohonen) # fitting
library(aweSOM) # plotting
library(SOMbrero) # plotting
set.seed(1234)
refit = FALSE
```

```{r loaddata}
#| echo: false
#| warning: false
#| message: false
# start by loading NE Pacific SST
nc <- nc_open("copernicus_jun19.nc")
```

```{r getcoords}
#| echo: false
#| warning: false
#| message: false
# get lat/long
x <- ncvar_get(nc, "longitude")
y <- ncvar_get(nc, "latitude")
lat <- rep(y, length(x))   # Vector of latitudes
lon <- rep(x, each = length(y))   # Vector of longitudes
```

```{r gettimes}
#| echo: false
#| warning: false
#| message: false
# get times
raw <- ncvar_get(nc, "time")
tunits<-ncatt_get(nc,"time",attname="units")
tustr<-strsplit(tunits$value, " ")
dates <- RNetCDF::utcal.nc("hours since 1900-01-01 00:00:00.0", raw)
dates <- as.data.frame(dates[,c("year","month")])
dates$index <- seq(1, nrow(dates))

```

Now we can extract the variable of interest

```{r}
var_name = "msl"
```

```{r extract}
#| echo: false
#| warning: false
#| message: false
tmp_array <- ncvar_get(nc,var_name)
dlname <- ncatt_get(nc,var_name,"long_name")
dunits <- ncatt_get(nc,var_name,"units")
fillvalue <- ncatt_get(nc,var_name,"_FillValue")
# replace netCDF fill values with NA's
tmp_array[tmp_array==fillvalue$value] <- NA
X <- tmp_array
```

```{r process}
#| echo: false
#| warning: false
#| message: false
# The 1st dimension of X is lon, 2nd dimension is lat, 3rd dimension is date. But the array needs to be flattened (time on rows, spatial cells on columns) for easier use.
X <- aperm(X, 3:1) # transpose array # X
X <- matrix(X, nrow=dim(X)[1], ncol=prod(dim(X)[2:3])) # months in rows, cells in columns! 
to_drop <- which(is.na(apply(X,2,sum)))
if(length(to_drop) > 0) {
X <- X[,-to_drop]# drop cells with NAs 
winter_lat <- lat[-to_drop]
winter_lon <- lon[-to_drop]
} else {
  winter_lat <- lat
  winter_lon <- lon
}
# Add block for winter average calculations
years <- unique(dates$year)

```

### Fitting the SOM model

```{r}
#| echo: false
#| warning: false
#| message: false
grid_dim1 <- 3
grid_dim2 <- 2 
grid_shape <- 'rectangular' 

# fit <- som(scale(X_winter), 
#                grid=somgrid(grid_dim1, grid_dim2, grid_shape))

#fit <- trainSOM(x.data = scale(X_winter), dimension = c(grid_dim1,grid_dim2), verbose = FALSE, nb.save = 0, topo = "square")
```

But because of the sensitivity to grids, we should iterate over grids of varying size. Here we'll just start with a 10x10, which should be large enough?

```{r}
#| echo: false
#| warning: false
#| message: false
grids <- expand.grid(xdim = 2:7)
grids$ydim <- grids$xdim + 1
grids <- rbind(grids, data.frame(xdim = 2:7, ydim = 2:7))
grids$mean_dist <- NA
grids$size <- grids$xdim * grids$ydim
# fit <- list()
# for(i in 1:nrow(grids)) {
#   # kohonen
#   #fit[[i]] <- som(scale(X_winter), 
#   #             grid=somgrid(grids$xdim[i], grids$ydim[i], grid_shape))
#   #grids$mean_dist[i] <- mean(fit[[i]]$distances)
#   # SOMbrero
#   fit[[i]] <- trainSOM(x.data = scale(X_winter), dimension = c(grids$xdim[i],grids$ydim[i]), verbose = FALSE, nb.save = 0, topo = "square")
# }
if(refit==TRUE){
fit <- trainSOM(x.data = scale(X), dimension = c(10,10), verbose = FALSE, nb.save = 0, topo = "square")
saveRDS(fit,"models/fit_sst_1010.rds")
} else {
  fit <- readRDS("models/fit_sst_1010.rds")
}
```

```{r}
#| echo: false
#| warning: false
#| message: false
#plot(grids$size, grids$mean_dist, xlab="Grid size", ylab="Mean distance")
```

```{r}
#| echo: false
#| warning: false
#| message: false
#best_model <- which(grids$size == 16)

output <- data.frame(year = dates$year,
                     cluster = fit$clustering,
                     month = dates$month,
                     index = dates$index)

#knitr::kable(output)
```

```{r}
#| echo: false
#| warning: false
#| message: false
X <- as.data.frame(X)
X$year <- dates$year
X$month <- dates$month
X$index <- dates$index
# convert wide to long
winter_long <- pivot_longer(X, cols = 1:(ncol(X)-3))
winter_long$cell_id <- as.numeric(substr(winter_long$name,2,length(winter_long$name)))
winter_long$lat <- lat[winter_long$cell_id]
winter_long$long <- lon[winter_long$cell_id]

# join in cluster IDs
winter_long <- dplyr::left_join(winter_long, output)

# Now calculated cluster avgs
# cluster_avg <- dplyr::group_by(winter_long, cell_id) %>%
#   dplyr::mutate(z = (value - mean(value))/sd(value)) %>%
#   dplyr::group_by(cell_id, cluster) %>%
#   dplyr::summarise(mean = mean(z),
#                    lat = lat[1],
#                    long = long[1])

```

```{r}
#| echo: false
#| warning: false
#| message: false
# g = ggplot(cluster_avg, aes(long, lat)) + 
#   geom_raster(aes(fill = mean)) + 
#   facet_wrap(~cluster) + 
#   #scale_color_gradient2() + 
#   scale_fill_gradient2(low = "blue", high = "red") + 
#   xlab("Lon") + 
#   ylab("Lat")

#g
```

```{r}
#| echo: false
#| warning: false
#| message: false
# png("plots/winter_map_sst.png")
# g
# dev.off()
```

Interpreting this many of SOM prototypes is challenging, and many of the maps appear to be redundant. One approach used with SOMs is post-hoc clustering of the maps. With winter SST, there appears to be \~ 4 groups:

```{r}
#| echo: false
#| warning: false
#| message: false
plot(superClass(fit))

```

```{r}
#| echo: false
#| warning: false
#| message: false
sc <- superClass(fit, k = 4)
output_cluster <- data.frame(cluster = seq(1,length(sc$cluster)), super_cluster = sc$cluster)
#knitr::kable(output_cluster)

output <- dplyr::left_join(output, output_cluster)
```

```{r}
#| echo: false
#| warning: false
#| message: false
ggplot(output, aes(index, super_cluster)) + 
  geom_point()
```

```{r}
#| echo: false
#| warning: false
#| message: false
plot(sc, what = "obs", type = "hitmap", maxsize = 20)
```

Looking at summaries by month, the months of June and December seem like the few that are variable,

```{r}
#| echo: false
#| warning: false
#| message: false
table(output$month, output$super_cluster)
```

```{r}
#| echo: false
#| warning: false
#| message: false
dplyr::filter(output, month %in% c(6,12)) %>%
  ggplot(aes(year, super_cluster)) + 
  geom_point() + 
  geom_line() + 
  facet_wrap(~month, nrow = 2)
```

```{r}
# join in the super cluster ids
winter_long <- dplyr::left_join(winter_long, output_cluster)

# calculate cell averages by super cluster
cluster_avg <- dplyr::group_by(winter_long, cell_id) %>%
  dplyr::mutate(z = (value - mean(value,na.rm=T))/sd(value,na.rm=T)) %>%
  dplyr::group_by(cell_id, super_cluster) %>%
  dplyr::summarise(mean = mean(z),
                   lat = lat[1],
                   long = long[1])

g = ggplot(cluster_avg, aes(long, lat)) +
  geom_raster(aes(fill = mean)) +
  facet_wrap(~super_cluster) +
  #scale_color_gradient2() +
  scale_fill_gradient2(low = "blue", high = "red") +
  xlab("Lon") +
  ylab("Lat")
# 
g
```

\break

### Is 4 clusters too coarse?

```{r}
#| echo: false
#| warning: false
#| message: false
sc <- superClass(fit, k = 6)
output_cluster <- data.frame(cluster = seq(1,length(sc$cluster)), super_cluster = sc$cluster)
#knitr::kable(output_cluster)

output <- dplyr::left_join(output, output_cluster)
```

Here we see all the variation is still in the November - January and May - June periods.

```{r}
table(output$month, output$super_cluster)
```

\break

### Alternative standardization

In the above example, we scaled the time series in each spatial cell to be Normal(0,1). That removes the spatial pattern, but not the global trend or the spatial trend. We can re-run the above after removing the long term global trend. This keeps the spatiotemporal variation in the data (and spatiotemporal trends)

#### Standardize + remove global trend

```{r}
#| echo: false
#| warning: false
#| message: false
X <- tmp_array
X <- aperm(X, 3:1) # transpose array # X
X <- matrix(X, nrow=dim(X)[1], ncol=prod(dim(X)[2:3])) # months in rows, cells in columns! 
to_drop <- which(is.na(apply(X,2,sum)))
if(length(to_drop) > 0) {
X <- X[,-to_drop]# drop cells with NAs 
winter_lat <- lat[-to_drop]
winter_lon <- lon[-to_drop]
} else {
  winter_lat <- lat
  winter_lon <- lon
}
# remove annual mean for each year
for(i in 1:nrow(X)) {
  X[i,] = X[i,] - mean(X[i,], na.rm=T)
}
X <- scale(X)

# grids <- expand.grid(xdim = 2:7)
# grids$ydim <- grids$xdim + 1
# grids <- rbind(grids, data.frame(xdim = 2:7, ydim = 2:7))
# grids$mean_dist <- NA
# grids$size <- grids$xdim * grids$ydim

if(refit==TRUE){
fit <- trainSOM(x.data = X, dimension = c(10,10), verbose = FALSE, nb.save = 0, topo = "square")
saveRDS(fit,"models/fit_slp_1010_std.rds")
} else {
  fit <- readRDS("models/fit_slp_1010_std.rds")
}
```

```{r}
#| echo: false
#| warning: false
#| message: false
#best_model <- which(grids$size == 16)

output <- data.frame(year = dates$year,
                     cluster = fit$clustering,
                     month = dates$month,
                     index = dates$index)

#knitr::kable(output)
```

```{r}
#| echo: false
#| warning: false
#| message: false
X <- as.data.frame(X)
X$year <- years

# convert wide to long
winter_long <- pivot_longer(X, cols = 1:(ncol(X)-3))
winter_long$cell_id <- as.numeric(substr(winter_long$name,2,length(winter_long$name)))
winter_long$lat <- lat[winter_long$cell_id]
winter_long$long <- lon[winter_long$cell_id]
#winter_long <- dplyr::rename(winter_long, year = year) 
# join in cluster IDs
winter_long <- dplyr::left_join(winter_long, output)

# Now calculated cluster avgs
# cluster_avg <- dplyr::group_by(winter_long, cell_id) %>%
#   dplyr::mutate(z = (value - mean(value))/sd(value)) %>%
#   dplyr::group_by(cell_id, cluster) %>%
#   dplyr::summarise(mean = mean(z),
#                    lat = lat[1],
#                    long = long[1])

```

```{r}
#| echo: false
#| warning: false
#| message: false
# g = ggplot(cluster_avg, aes(long, lat)) + 
#   geom_raster(aes(fill = mean)) + 
#   facet_wrap(~cluster) + 
#   #scale_color_gradient2() + 
#   scale_fill_gradient2(low = "blue", high = "red") + 
#   xlab("Lon") + 
#   ylab("Lat")
# 
# g
```

```{r}
#| echo: false
#| warning: false
#| message: false
plot(superClass(fit))
```

```{r}
#| echo: false
#| warning: false
#| message: false
sc <- superClass(fit, k = 6)
output_cluster <- data.frame(cluster = seq(1,length(sc$cluster)), super_cluster = sc$cluster)
knitr::kable(output_cluster)

output <- dplyr::left_join(output, output_cluster)
```

```{r}
#| echo: false
#| warning: false
#| message: false
ggplot(output, aes(year, super_cluster)) + 
  geom_point() + geom_line()
```

```{r}
#| echo: false
#| warning: false
#| message: false
plot(sc, what = "obs", type = "hitmap", maxsize = 20)
```
