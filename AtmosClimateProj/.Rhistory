K <- 1
x <- matrix(ncol=K, nrow=N)
x[,1]<-rnorm(N, 0,1)
alpha <- c(2, 4,-3)
beta<- c(-1, 3, -2)
sigma <-0.2
y <- rep(alpha, each = N/3)+rep(beta, each = N/3)*x+sigma
#### STAN data ####
data <- list(N = N,
NP=NP,
P = PN, #population assignment
K = K,# total observations
x=x,
y=y
)
warmups <- 1000
total_iterations <- 6000
max_treedepth <-  12
n_chains <-  3
n_cores <- 4
adapt_delta <- 0.95
####Fitting the Model ####
bhfit <- stan(
file = here::here("Src/BayesianLinearHierarchicalModels.stan"),
data = data,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
refresh = 250,
control = list(max_treedepth = max_treedepth,
adapt_delta = adapt_delta)
)
y <- matrix(ncol=K, nrow=N)
y[,1]<- rep(alpha, each = N/3)+rep(beta, each = N/3)*x+sigma
#### STAN data ####
data <- list(N = N,
NP=NP,
P = PN, #population assignment
K = K,# total observations
x=x,
y=y
)
warmups <- 1000
total_iterations <- 6000
max_treedepth <-  12
n_chains <-  3
n_cores <- 4
adapt_delta <- 0.95
####Fitting the Model ####
bhfit <- stan(
file = here::here("Src/BayesianLinearHierarchicalModels.stan"),
data = data,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
refresh = 250,
control = list(max_treedepth = max_treedepth,
adapt_delta = adapt_delta)
)
y <- vector(rep(alpha, each = N/3)+rep(beta, each = N/3)*x+sigma)
sim <- rep(alpha, each = N/3)+rep(beta, each = N/3)*x+sigma
sim <- c(rep(alpha, each = N/3)+rep(beta, each = N/3)*x+sigma)
sim
y <- c(rep(alpha, each = N/3)+rep(beta, each = N/3)*x+sigma)
#### STAN data ####
data <- list(N = N,
NP=NP,
P = PN, #population assignment
K = K,# total observations
x=x,
y=y
)
warmups <- 1000
total_iterations <- 6000
max_treedepth <-  12
n_chains <-  3
n_cores <- 4
adapt_delta <- 0.95
####Fitting the Model ####
bhfit <- stan(
file = here::here("Src/BayesianLinearHierarchicalModels.stan"),
data = data,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
refresh = 250,
control = list(max_treedepth = max_treedepth,
adapt_delta = adapt_delta)
)
y
y <- c(rep(alpha, each = N/3)+rep(beta, each = N/3)*x)
#### STAN data ####
data <- list(N = N,
NP=NP,
P = PN, #population assignment
K = K,# total observations
x=x,
y=y
)
warmups <- 1000
total_iterations <- 6000
max_treedepth <-  12
n_chains <-  3
n_cores <- 4
adapt_delta <- 0.95
####Fitting the Model ####
bhfit <- stan(
file = here::here("Src/BayesianLinearHierarchicalModels.stan"),
data = data,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
refresh = 250,
control = list(max_treedepth = max_treedepth,
adapt_delta = adapt_delta)
)
PN
rep(alpha, each = N/3)
####Fitting the Model ####
bhfit <- stan(
file = here::here("Src/BayesianLinearHierarchicalModels.stan"),
data = data,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
refresh = 250,
control = list(max_treedepth = max_treedepth,
adapt_delta = adapt_delta)
)
MCMCsummary(bhfit)
####Fitting the Model ####
bhfit <- stan(
file = here::here("Src/BayesianLinearHierarchicalModels.stan"),
data = data,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
refresh = 250,
control = list(max_treedepth = max_treedepth,
adapt_delta = adapt_delta)
)
MCMCsummary(bhfit)
y <- c(rep(alpha, each = N/3)+rep(beta, each = N/3)*x+sigma)
#### STAN data ####
data <- list(N = N,
NP=NP,
P = PN, #population assignment
K = K,# total observations
x=x,
y=y
)
warmups <- 1000
total_iterations <- 6000
max_treedepth <-  12
n_chains <-  3
n_cores <- 4
adapt_delta <- 0.95
####Fitting the Model ####
bhfit <- stan(
file = here::here("Src/BayesianLinearHierarchicalModels.stan"),
data = data,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
refresh = 250,
control = list(max_treedepth = max_treedepth,
adapt_delta = adapt_delta)
)
MCMCsummary(bhfit)
sigma <-0.2
y <- c(rep(alpha, each = N/3)+rep(beta, each = N/3)*x+sigma)
####Fitting the Model ####
bhfit <- stan(
file = here::here("Src/BayesianLinearHierarchicalModels.stan"),
data = data,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
refresh = 250,
control = list(max_treedepth = max_treedepth,
adapt_delta = adapt_delta)
)
MCMCsummary(bhfit)
####Fitting the Model ####
bhfit <- stan(
file = here::here("Src/BayesianLinearHierarchicalModels.stan"),
data = data,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
refresh = 250,
control = list(max_treedepth = max_treedepth,
adapt_delta = adapt_delta)
)
MCMCsummary(bhfit)
sigma <-rnorm(N, 1,0.2)
y <- c(rep(alpha, each = N/3)+rep(beta, each = N/3)*x+sigma)
#### STAN data ####
data <- list(N = N,
NP=NP,
P = PN, #population assignment
K = K,# total observations
x=x,
y=y
)
warmups <- 1000
total_iterations <- 6000
max_treedepth <-  12
n_chains <-  3
n_cores <- 4
adapt_delta <- 0.95
####Fitting the Model ####
bhfit <- stan(
file = here::here("Src/BayesianLinearHierarchicalModels.stan"),
data = data,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
refresh = 250,
control = list(max_treedepth = max_treedepth,
adapt_delta = adapt_delta)
)
MCMCsummary(bhfit)
RN <- rep(seq(1,3),  30)
RN
NR<-3
RN <- rep(seq(1,3),  30)
N <- 90
NP<-3
PN <- rep(seq(1,NP), each = 30)
NR<-3
RN <- rep(seq(1,NR),  30)
K <- 1
x <- matrix(ncol=K, nrow=N)
x[,1]<-rnorm(N, 0,1)
N <- 90
NP<-3
PN <- rep(seq(1,NP), each = 30)
NR<-3
RN <- rep(seq(1,NR),  30)
K <- 1
x <- matrix(ncol=K, nrow=N)
x[,1]<-rnorm(N, 0,1)
alphaP <- c(2, 4,-3)
betaP<- c(-1, 3, -2)
sigma <-rnorm(N, 1,0.2)
rep(alphaR, N/3)
alphaR <- c(6, 7,8)
betaR<- c(-0.1, 0.9, -0.8)
rep(alphaR, N/3)
alphaR <- c(6, 7,8)
betaR<- c(-0.1, 0.9, -0.8)
y <- c(rep(alphaP, each = N/3)+rep(alphaR, N/3)+rep(betaP, each = N/3)*x+rep(betaR, N/3)*x+sigma)
#### STAN data ####
data <- list(N = N,
NP=NP,
P = PN, #population assignment
NR=NR,
R = RN, #population assignment
K = K,# total observations
x=x,
y=y
)
warmups <- 1000
total_iterations <- 6000
max_treedepth <-  12
n_chains <-  3
n_cores <- 4
adapt_delta <- 0.95
####Fitting the Model ####
bhfit <- stan(
file = here::here("Src/BayesianLinearHierarchicalModels.stan"),
data = data,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
refresh = 250,
control = list(max_treedepth = max_treedepth,
adapt_delta = adapt_delta)
)
MCMCsummary(bhfit)
N <- 90
NP<-3
PN <- rep(seq(1,NP), each = 30)
NR<-3
RN <- rep(seq(1,NR),  30)
K <- 1
x <- matrix(ncol=K, nrow=N)
x[,1]<-rnorm(N, 0,1)
alphaP <- c(2, 4,-3)
betaP<- c(-1, 3, -2)
sigma <-rnorm(N, 1,0.2)
betaR<- c(-0.1, 0.9, -0.8)
y <- c(rep(alphaP, each = N/3)+rep(betaP, each = N/3)*x+rep(betaR, N/3)*x+sigma)
#### STAN data ####
data <- list(N = N,
NP=NP,
P = PN, #population assignment
NR=NR,
R = RN, #population assignment
K = K,# total observations
x=x,
y=y
)
warmups <- 1000
total_iterations <- 3000
max_treedepth <-  10
n_chains <-  3
n_cores <- 4
adapt_delta <- 0.95
####Fitting the Model ####
bhfit <- stan(
file = here::here("Src/BayesianLinearHierarchicalModels.stan"),
data = data,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
refresh = 250,
control = list(max_treedepth = max_treedepth,
adapt_delta = adapt_delta)
)
MCMCsummary(bhfit)
y%>%
add_column(x = x, PN, RN)
data.frame(y)%>%
add_column(x = x, period = PN, region = RN)
simulated.data, aes(x = x, y = y, color=period)) +
ggplot(data = simulated.data, aes(x = x, y = y, color=period)) +
geom_point(size=0.75,aes(col=period))
simulated.data<- data.frame(y)%>%
add_column(x = x, period = PN, region = RN)
ggplot(data = simulated.data, aes(x = x, y = y, color=period)) +
geom_point(size=0.75,aes(col=period))
ggplot(data = simulated.data, aes(x = x, y = y, color=period)) +
geom_point(size=0.75,aes(col=period, lty=region))
ggplot(data = simulated.data, aes(x = x, y = y, color=period)) +
geom_point(size=0.75,aes(col=period, pch=region))
ggplot(data = simulated.data, aes(x = x, y = y, color=period)) +
geom_point(size=0.75,aes(col=period, shape=region))
ggplot(data = simulated.data, aes(x = x, y = y, color=period, shape=region)) +
geom_point(size=0.75,aes(col=period, shape=region))
simulated.data<- data.frame(y)%>%
add_column(x = x, period = as.factor(PN), region = as.factor(RN))
ggplot(data = simulated.data, aes(x = x, y = y, color=period, shape=region)) +
geom_point(size=0.75,aes(col=period, shape=region))
ggplot(data = simulated.data, aes(x = x, y = y, color=period, shape=region)) +
geom_point(size=0.75,aes(col=period, shape=region)) +
geom_line(aes(col=period, lty=region)) +
scale_color_manual(values =  c(lumina[3],lumina[4],lumina[7]))+
geom_hline(yintercept = 0, lty = "dotted") +
facet_wrap(.~pop, scales='free',ncol = 3) +
scale_x_continuous(name = "Brood year", breaks = seq(1980, 2010, by = 10)) +
expand_limits(x = c(1979,2011)) +
theme_bw()+
theme(legend.position = c(0.9, -0.025),
legend.justification = c(1, 0))+
scale_y_continuous(name = "Productivity Index (ln[R/S])")
ggplot(data = simulated.data, aes(x = x, y = y, color=period, shape=region)) +
geom_point(size=0.75,aes(col=period, shape=region)) +
geom_line(aes(col=period, lty=region))
ggplot(data = simulated.data, aes(x = x, y = y, color=period, shape=region)) +
geom_point(size=0.75,aes(col=period, shape=region)) +
geom_smooth(aes(col=period, lty=region))
ggplot(data = simulated.data, aes(x = x, y = y, color=period, shape=region)) +
geom_point(size=0.75,aes(col=period, shape=region)) +
geom_smooth(method = "lm", se = FALSE)
ggplot(data = simulated.data, aes(x = x, y = y, color=period, shape=region)) +
geom_point(size=0.75,aes(col=period, shape=region)) +
geom_smooth(method = "lm", se = FALSE, aes(col=period, lty=region))
ggplot(data = simulated.data, aes(x = x, y = y, color=period, shape=region)) +
geom_point(size=0.75,aes(col=period, shape=region)) +
geom_smooth(method = "lm", se = FALSE, aes(col=period, lty=region)) +
theme_bw()+
ggplot(data = simulated.data, aes(x = x, y = y, color=period, shape=region)) +
geom_point(size=0.75,aes(col=period, shape=region)) +
geom_smooth(method = "lm", se = FALSE, aes(col=period, lty=region)) +
theme_bw()
ggplot(data = simulated.data, aes(x = x, y = y, color=period, shape=region)) +
geom_point(size=0.75,aes(col=period, shape=region))
ggplot(data = simulated.data, aes(x = x, y = y, color=period, shape=region)) +
geom_point(size=0.75,aes(col=period, shape=region)) +
geom_smooth(method = "lm", se = FALSE, aes(col=period, lty=region))
ggplot(data = simulated.data, aes(x = x, y = y, color=period, shape=region)) +
geom_point(size=0.75,aes(col=period, shape=region)) +
geom_smooth(method = "lm", se = FALSE, aes(col=period, lty=region)) +
theme_bw()
install.packages("PNWColors")
library(PNWColors)
col<-pnw_palette("Bay",4,type="discrete")
ggplot(data = simulated.data, aes(x = x, y = y, color=period, shape=region)) +
geom_point(size=0.75,aes(col=period, shape=region)) +
geom_smooth(method = "lm", se = FALSE, aes(col=period, lty=region)) +
scale_color_manual(values =  col[1:3])+
theme_bw()
col<-pnw_palette("Bay",3,type="discrete")
ggplot(data = simulated.data, aes(x = x, y = y, color=period, shape=region)) +
geom_point(size=0.75,aes(col=period, shape=region)) +
geom_smooth(method = "lm", se = FALSE, aes(col=period, lty=region)) +
scale_color_manual(values =  col[1:3])+
theme_bw()
col<-pnw_palette("Bay",8,type="discrete")
col<-pnw_palette("Bay",5,type="discrete")
ggplot(data = simulated.data, aes(x = x, y = y, color=period, shape=region)) +
geom_point(size=0.75,aes(col=period, shape=region)) +
geom_smooth(method = "lm", se = FALSE, aes(col=period, lty=region)) +
scale_color_manual(values =  col[1:3])+
theme_bw()
ggplot(data = simulated.data, aes(x = x, y = y, color=period, shape=region)) +
geom_point(size=0.75,aes(col=period, shape=region)) +
geom_smooth(method = "lm", se = FALSE, aes(col=period, lty=region)) +
scale_color_manual(values =  col[2:4])+
theme_bw()
col<-pnw_palette("Starfish",5,type="discrete")
ggplot(data = simulated.data, aes(x = x, y = y, color=period, shape=region)) +
geom_point(size=0.75,aes(col=period, shape=region)) +
geom_smooth(method = "lm", se = FALSE, aes(col=period, lty=region)) +
scale_color_manual(values =  col[2:4])+
theme_bw()
col<-pnw_palette("Starfish",3,type="discrete")
ggplot(data = simulated.data, aes(x = x, y = y, color=period, shape=region)) +
geom_point(size=0.75,aes(col=period, shape=region)) +
geom_smooth(method = "lm", se = FALSE, aes(col=period, lty=region)) +
scale_color_manual(values =  col[1:3])+
theme_bw()
col<-pnw_palette("Sunset2",3,type="discrete")
ggplot(data = simulated.data, aes(x = x, y = y, color=period, shape=region)) +
geom_point(size=0.75,aes(col=period, shape=region)) +
geom_smooth(method = "lm", se = FALSE, aes(col=period, lty=region)) +
scale_color_manual(values =  col[1:3])+
theme_bw()
cs.dat <-read.csv('Data/physical/erdUI246hr_d68d_e898_8529.csv')
bakundat <-read.csv('Data/physical/erdUI246hr_d68d_e898_8529.csv')%>%
bind_rows(read.csv('Data/physical/erdUI276hr_d68d_e898_8529.csv'))
bakundat
bakundat <-read.csv('Data/physical/Bakun/erdUI246hr_d68d_e898_8529.csv')%>%
bind_rows(read.csv('Data/physical/Bakun/erdUI276hr_d68d_e898_8529.csv'))%>%
bind_rows(read.csv('Data/physical/Bakun/erdUI306hr_d68d_e898_8529.csv'))%>%
bind_rows(read.csv('Data/physical/Bakun/erdUI336hr_d68d_e898_8529.csv'))%>%
bind_rows(read.csv('Data/physical/Bakun/erdUI366hr_d68d_e898_8529.csv'))%>%
bind_rows(read.csv('Data/physical/Bakun/erdUI396hr_d68d_e898_8529.csv'))%>%
bind_rows(read.csv('Data/physical/Bakun/erdUI426hr_d68d_e898_8529.csv'))%>%
bind_rows(read.csv('Data/physical/Bakun/erdUI456hr_d68d_e898_8529.csv'))%>%
bind_rows(read.csv('Data/physical/Bakun/erdUI486hr_d68d_e898_8529.csv'))%>%
bind_rows(read.csv('Data/physical/Bakun/erdUI516hr_d68d_e898_8529.csv'))%>%
bind_rows(read.csv('Data/physical/Bakun/erdUI546hr_d68d_e898_8529.csv'))%>%
bind_rows(read.csv('Data/physical/Bakun/erdUI576hr_d68d_e898_8529.csv'))%>%
bind_rows(read.csv('Data/physical/Bakun/erdUI606hr_d68d_e898_8529.csv'))%>%
bind_rows(read.csv('Data/physical/Bakun/erdUI616hr_d68d_e898_8529.csv'))
bakundat <-read.csv('Data/physical/Bakun/erdUI246hr_d68d_e898_8529.csv')%>%
bind_rows(read.csv('Data/physical/Bakun/erdUI276hr_d68d_e898_8529.csv'))%>%
bind_rows(read.csv('Data/physical/Bakun/erdUI306hr_d68d_e898_8529.csv'))%>%
bind_rows(read.csv('Data/physical/Bakun/erdUI336hr_d68d_e898_8529.csv'))%>%
bind_rows(read.csv('Data/physical/Bakun/erdUI366hr_d68d_e898_8529.csv'))%>%
bind_rows(read.csv('Data/physical/Bakun/erdUI396hr_d68d_e898_8529.csv'))%>%
bind_rows(read.csv('Data/physical/Bakun/erdUI426hr_d68d_e898_8529.csv'))%>%
bind_rows(read.csv('Data/physical/Bakun/erdUI456hr_d68d_e898_8529.csv'))%>%
bind_rows(read.csv('Data/physical/Bakun/erdUI486hr_d68d_e898_8529.csv'))%>%
bind_rows(read.csv('Data/physical/Bakun/erdUI516hr_d68d_e898_8529.csv'))%>%
bind_rows(read.csv('Data/physical/Bakun/erdUI546hr_d68d_e898_8529.csv'))%>%
bind_rows(read.csv('Data/physical/Bakun/erdUI576hr_d68d_e898_8529.csv'))%>%
bind_rows(read.csv('Data/physical/Bakun/erdUI606hr_d68d_e898_8529.csv'))%>%
bind_rows(read.csv('Data/physical/Bakun/erdUI616hr_d68d_e898_8529.csv'))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(nord)
library(tidyr)
library(lubridate)
library(readr)
library(stringr)
library(ggplot2)
library(cowplot)
library(Cairo)
library(MCMCvis)
library(HDInterval)
library(reshape2)
library(tidyverse)
library(dplyr)
library(rstan)
library(car)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(nord)
library(tidyr)
library(lubridate)
library(readr)
library(stringr)
library(ggplot2)
library(cowplot)
library(Cairo)
library(MCMCvis)
library(HDInterval)
library(reshape2)
library(tidyverse)
library(dplyr)
library(rstan)
library(car)
library(here)
here::i_am("AtmosClimateProj/src.Rmd")
here::i_am("AtmosClimateProj/Src.Rmd")
